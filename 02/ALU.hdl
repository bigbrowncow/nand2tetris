// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero t     ny, // negate the y input?
        ny,
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.


// if (zx == 1) sets x = 0        // 16-bit constant

      Mux16(a= x, b= false, sel = zx, out = c1);

// if (nx == 1) sets x = !x       // bitwise not

    Not16(in=c1, out=c2);
    Mux16(a= c1, b= c2, sel = nx, out = x2);

// if (zy == 1) sets y = 0        // 16-bit constant

      Mux16(a= y, b= false, sel = zy, out = d1);


// if (ny == 1) sets y = !y       // bitwise not

    Not16(in=d1, out=d2);
    Mux16(a= d1, b= d2, sel = ny, out = y2);


//    Not16(in=y, out=noty);
//    Mux16(a= wy, b= noty, sel = ny, out = wy2);

    Add16(a = x2, b = y2, out = xplusy);
    And16(a = x2, b = y2, out = xandy);

// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and

    Mux16(a= xandy, b= xplusy, sel= f, out= o1);
    
// if (no == 1) sets out = !out   // bitwise not
    Not16(in=o1, out=notout);


    Mux16(a= o1, b= notout, sel= no, out= o2);

    Or16(a=o2, b=false, out[0..7]=or1);
    Or16(a=o2, b=false, out[8..15]=or2);

    Or8Way(in= or1, out=or1x );
    Or8Way(in= or2, out=or2x );
    Or(a=or1x, b=or2x, out=notzr);
    Not(in=notzr, out=zr);

    Or16(a=o2,b=false, out[15]=ngtest);
    Or(a=ngtest, b=false, out=ng);
    
    Or16(a=o2, b=false, out=out);








}